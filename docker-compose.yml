version: '3.9'
services:
  frontend:
    build: ./front-end
    ports:
      - 3000:3000
    working_dir: /front-end
    command: npm run dev
    volumes:
      - ./front-end:/front-end
    depends_on:
      backend:
        condition: service_healthy
    # Os `healthcheck` devem garantir que a aplicação
    # está operacional, antes de liberar o container
    healthcheck:
      test: ["CMD", "lsof", "-t", "-i:3000"]  # Caso utilize outra porta interna para o front, altere ela aqui também
      timeout: 10s
      retries: 5
  backend:
    container_name: back-end
    build: ./back-end
    ports:
      - 3001:3001
    working_dir: /back-end
    command: npm run dev
    volumes:
      - ./back-end:/back-end
    depends_on:
      db:
        condition: service_healthy
    environment:
      - APP_PORT=3010
       -NODE_ENV=development
       -API_PORT=3010
       -MYSQL_HOST=localhost
       -MYSQL_PORT=3306
       -MYSQL_USER=root
       -MYSQL_PASSWORD=root
       -MYSQL_DB_NAME=api_heroes
       -EVAL_ALWAYS_RESTORE_DEV_DB=true
    healthcheck:
      test: ["CMD", "lsof", "-t", "-i:3001"] # Caso utilize outra porta interna para o back, altere ela aqui também
      timeout: 10s
      retries: 5
  db:
    image: mysql:8.0.21
    container_name: db
    platform: linux/x86_64
    ports:
      - 3307:3306
    environment:
      - MYSQL_ROOT_PASSWORD=root
    restart: 'always'
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"] # Deve aguardar o banco ficar operacional
      timeout: 10s
      retries: 5
    cap_add:
      - SYS_NICE # Deve omitir alertas menores